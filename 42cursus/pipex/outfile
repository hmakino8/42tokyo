PRINTF(1)                          fish-shell                          PRINTF(1)



NNAAMMEE
       printf - display text according to a format string

SSYYNNOOPPSSIISS
       pprriinnttff _F_O_R_M_A_T [_A_R_G_U_M_E_N_T ...]


DDEESSCCRRIIPPTTIIOONN
       NOTE: This page documents the fish builtin pprriinnttff.  To see the
       documentation on the pprriinnttff command you might have, use ccoommmmaanndd mmaann
       pprriinnttff.

       pprriinnttff uses the format string _F_O_R_M_A_T to print the _A_R_G_U_M_E_N_T arguments.
       This means that it takes format specifiers in the format string and
       replaces each with an argument.

       The _F_O_R_M_A_T argument is re-used as many times as necessary to convert all
       of the given arguments. So pprriinnttff %%ss\\nn fflloouunnddeerr ccaattffiisshh cclloowwnnffiisshh sshhaarrkk
       will print four lines.

       Unlike echo, pprriinnttff does not append a new line unless it is specified as
       part of the string.

       It doesn't support any options, so there is no need for a ---- separator,
       which makes it easier to use for arbitrary input than eecchhoo. [1]

FFOORRMMAATT SSPPEECCIIFFIIEERRSS
       Valid format specifiers are taken from the C library function pprriinnttff((33)):

       • %%dd or %%ii: Argument will be used as decimal integer (signed or unsigned)

       • %%oo: An octal unsigned integer

       • %%uu: An unsigned decimal integer - this means negative numbers will wrap
         around

       • %%xx or %%XX: An unsigned hexadecimal integer

       • %%ff, %%gg or %%GG: A floating-point number. %%ff defaults to 6 places after
         the decimal point (which is locale-dependent - e.g. in de_DE it will be
         a ,,). %%gg and %%GG will trim trailing zeroes and switch to scientific
         notation (like %%ee) if the numbers get small or large enough.

       • %%ee or %%EE: A floating-point number in scientific (XXXeYY) notation

       • %%ss: A string

       • %%bb: As a string, interpreting backslash escapes, except that octal
         escapes are of the form 0 or 0ooo.

       %%%% signifies a literal "%".

       Conversion can fail, e.g. "102.234" can't losslessly convert to an
       integer, causing printf to print an error. If you are okay with losing
       information, silence errors with 22>>//ddeevv//nnuullll.

       A number between the %% and the format letter specifies the width. The
       result will be left-padded with spaces.

BBAACCKKSSLLAASSHH EESSCCAAPPEESS
       printf also knows a number of backslash escapes:

       • \\"" double quote

       • \\\\ backslash

       • \\aa alert (bell)

       • \\bb backspace

       • \\cc produce no further output

       • \\ee escape

       • \\ff form feed

       • \\nn new line

       • \\rr carriage return

       • \\tt horizontal tab

       • \\vv vertical tab

       • \\oooooo octal number (ooo is 1 to 3 digits)

       • \\xxhhhh hexadecimal number (hhh is 1 to 2 digits)

       • \\uuhhhhhhhh 16-bit Unicode character (hhhh is 4 digits)

       • \\UUhhhhhhhhhhhhhhhh 32-bit Unicode character (hhhhhhhh is 8 digits)

EERRRROORRSS AANNDD RREETTUURRNN SSTTAATTUUSS
       If the given argument doesn't work for the given format (like when you
       try to convert a number like 3.141592 to an integer), printf prints an
       error, to stderr. printf will then also return non-zero, but will still
       try to print as much as it can.

       It will also return non-zero if no argument at all was given, in which
       case it will print nothing.

       This printf has been imported from the printf in GNU Coreutils version
       6.9. If you would like to use a newer version of printf, for example the
       one shipped with your OS, try ccoommmmaanndd pprriinnttff.

EEXXAAMMPPLLEE

          printf '%s\t%s\n' flounder fish

       Will print "flounder    fish" (separated with a tab character), followed
       by a newline character. This is useful for writing completions, as fish
       expects completion scripts to output the option followed by the
       description, separated with a tab character.

          printf '%s: %d' "Number of bananas in my pocket" 42

       Will print "Number of bananas in my pocket: 42", _w_i_t_h_o_u_t a newline.

SSEEEE AALLSSOO

       • the echo command, for simpler output

FFOOOOTTNNOOTTEESS
       [1]  In fact, while fish's eecchhoo supports ----, POSIX forbids it, so other
            implementations can't be used if the input contains anything
            starting with --.

CCOOPPYYRRIIGGHHTT
       2022, fish-shell developers



3.4                              March 26, 2022                        PRINTF(1)
